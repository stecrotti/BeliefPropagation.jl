var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BeliefPropagation","category":"page"},{"location":"#BeliefPropagation","page":"Home","title":"BeliefPropagation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BeliefPropagation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BeliefPropagation,\n    BeliefPropagation.Models,\n    BeliefPropagation.Test,\n    ]","category":"page"},{"location":"#BeliefPropagation.BP","page":"Home","title":"BeliefPropagation.BP","text":"BP{F<:BPFactor, FV<:BPFactor, M, MB, G<:FactorGraph}\n\nA type representing the state of the Belief Propagation algorithm.\n\nFields\n\ng: a [FactorGraph]\nψ: a vector of BPFactor representing the factors {ψₐ(xₐ)}ₐ\nϕ: a vector of BPFactor representing the single-variable factors {ϕᵢ(xᵢ)}ᵢ\nu: messages from factor to variable\nh: messages from variable to factor\nb: beliefs\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.BP-Tuple{IndexedFactorGraphs.AbstractFactorGraph, AbstractVector{<:BPFactor}, Any}","page":"Home","title":"BeliefPropagation.BP","text":"BP(g::FactorGraph, ψ::AbstractVector{<:BPFactor}, qs; ϕ)\n\nConstructor for the BP type.\n\nArguments\n\ng: a [FactorGraph]\nψ: a vector of BPFactor representing the factors {ψₐ(xₐ)}ₐ\nstates: an iterable of integers of length equal to the number of variable nodes specifyig the number of values each variable can take \nϕ: (optional) a vector of BPFactor representing the single-variable factors {ϕᵢ(xᵢ)}ᵢ\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.BPFactor","page":"Home","title":"BeliefPropagation.BPFactor","text":"BPFactor\n\nAn abstract type representing a factor.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.TabulatedBPFactor","page":"Home","title":"BeliefPropagation.TabulatedBPFactor","text":"TabulatedBPFactor\n\nA type of BPFactor constructed by specifying the output to any input in a tabular fashion via an array values.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.UniformFactor","page":"Home","title":"BeliefPropagation.UniformFactor","text":"UniformFactor\n\nA type of BPFactor which returns the same value for any input: it behaves as if it wasn't even there. It is used as the default for single-variable factors\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.avg_energy-Tuple{Function, BP}","page":"Home","title":"BeliefPropagation.avg_energy","text":"avg_energy([f], bp::BP)\n\nReturn the average energy\n\nsum_asum_underlinex_ab_a(underlinex_a) left-logpsi_a(underlinex_a)right + sum_isum_x_ib_i(x_i) left-logphi_i(x_i)right\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.beliefs-Tuple{Function, BP}","page":"Home","title":"BeliefPropagation.beliefs","text":"beliefs([f], bp::BP)\n\nReturn single-variable beliefs b_i(x_i)_i.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.bethe_free_energy-Tuple{Function, BP}","page":"Home","title":"BeliefPropagation.bethe_free_energy","text":"bethe_free_energy([f], bp::BP)\n\nReturn the bethe free energy\n\nsum_asum_underlinex_ab_a(underlinex_a) left-logfracb_a(underlinex_a)psi_a(underlinex_a)right + sum_isum_x_ib_i(x_i) left-logfracb_i(x_i)^1-lvertpartial irvertphi_i(x_i)right\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.energy-Tuple{BP, Any}","page":"Home","title":"BeliefPropagation.energy","text":"energy(bp::BP, x)\n\nReturn the energy\n\nsum_a left-logpsi_a(underlinex_a)right + sum_i left-logphi_i(x_i)right\n\nof configuration x.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.evaluate-Tuple{BP, Any}","page":"Home","title":"BeliefPropagation.evaluate","text":"evaluate(bp::BP, x)\n\nReturn the unnormalized probability prod_apsi_a(underlinex_a)prod_iphi_i(x_i) of configuration x.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.factor_beliefs-Tuple{Function, BP}","page":"Home","title":"BeliefPropagation.factor_beliefs","text":"factor_beliefs([f], bp::BP)\n\nReturn factor beliefs b_a(underlinex_a)_a.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.init_free_energy-Tuple{BP}","page":"Home","title":"BeliefPropagation.init_free_energy","text":"init_free_energy(bp::BP)\n\nReturn a BeliefPropagation.BetheFreeEnergy which can be used to compute the Bethe Free Energy using message normalizations. In particular, this avoids explicit computation of factor beliefs, whose cost is exponential in the factor degree.\n\nExample\n\njulia> using BeliefPropagation, IndexedFactorGraphs, BeliefPropagation.Models\n\njulia> using Random: MersenneTwister\n\njulia> g = rand_factor_graph(MersenneTwister(0), 10, 15, 20);\n\njulia> ψ = IsingCoupling.(randn(MersenneTwister(0), nfactors(g)));\n\njulia> bp = BP(g, ψ, fill(2, nvariables(g)));\n\njulia> f = init_free_energy(bp);\n\njulia> iterate!(bp; maxiter=30, tol=1e-16, f);\n\njulia> @assert sum(f) ≈ bethe_free_energy(bp)\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.iterate!-Tuple{BP}","page":"Home","title":"BeliefPropagation.iterate!","text":"iterate!(bp::BP; kwargs...)\n\nRun BP.\n\nOptional arguments\n\nupdate_variable!: the function that computes and updates variable-to-factor messages\nupdate_factor!: the function that computes and updates factor-to-variable messages\nmaxiter: maximum number of iterations\ntol: convergence check parameter\ndamp: damping parameter\nrein: reinforcement parameter\nf: a vector to store on-the-fly computations of the bethe free energy\ncallback\ncheck_convergence: a function that checks if convergence has been reached\nextra arguments to be passed to custom update_variable! and update_factor!\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.iterate_ms!-Tuple{BP}","page":"Home","title":"BeliefPropagation.iterate_ms!","text":"iterate_ms!(bp::BP; kwargs...)\n\nRuns the max-sum algorithm (BP at zero temperature). \n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.nstates-Tuple{BP, Integer}","page":"Home","title":"BeliefPropagation.nstates","text":"nstates(bp::BP, i::Integer)\n\nReturn the number of values taken by variable i.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.reset!-Tuple{BP}","page":"Home","title":"BeliefPropagation.reset!","text":"reset!(bp::BP)\n\nReset all messages and beliefs to zero\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Models.fast_ising_bp","page":"Home","title":"BeliefPropagation.Models.fast_ising_bp","text":"fast_ising_bp(g::AbstractFactorGraph, ψ::Vector{<:IsingCoupling}, [ϕ])\n\nReturn a BP instance with Ising factors and messages and beliefs in log-ratio format:\n\nbeginalign*\n\tm_ato i(sigma_i) propto e^u_ato isigma_i\n\tu_ato i = frac12logfracm_ato i(+1)m_ato i(+1)\nendalign*\n\n\n\n\n\n","category":"function"},{"location":"#BeliefPropagation.TabulatedBPFactor-Tuple{BPFactor, Any}","page":"Home","title":"BeliefPropagation.TabulatedBPFactor","text":"TabulatedBPFactor(f::BPFactor, states)\n\nConstruct a TabulatedBPFactor out of any BPFactor. Used mostly for tests.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.exact_avg_energy-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.exact_avg_energy","text":"exact_avg_energy(bp::BP; p_exact = exact_prob(bp))\n\nExhaustively compute the average energy (minus the log of the unnormalized probability weight).\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.exact_factor_marginals-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.exact_factor_marginals","text":"exact_factor_marginals(bp::BP; p_exact = exact_prob(bp))\n\nExhaustively compute marginal distributions for each factor.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.exact_marginals-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.exact_marginals","text":"exact_marginals(bp::BP; p_exact = exact_prob(bp))\n\nExhaustively compute marginal distributions for each variable.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.exact_minimum_energy-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.exact_minimum_energy","text":"exact_minimum_energy(bp::BP)\n\nExhaustively compute the minimum energy (minus the log of the unnormalized probability weight).\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.exact_normalization-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.exact_normalization","text":"exact_normalization(bp::BP)\n\nExhaustively compute the normalization constant.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.exact_prob-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.exact_prob","text":"exact_prob(bp::BP; Z = exact_normalization(bp))\n\nExhaustively compute the probability of each possible configuration of the variables.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.rand_bp-Tuple{Random.AbstractRNG, IndexedFactorGraphs.FactorGraph, Any}","page":"Home","title":"BeliefPropagation.Test.rand_bp","text":"rand_bp([rng], g::FactorGraph, states)\n\nReturn a BP with random factors.\n\nstates is an iterable containing the number of values that can be taken by each variable.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.rand_factor-Tuple{Random.AbstractRNG, Any}","page":"Home","title":"BeliefPropagation.Test.rand_factor","text":"rand_factor([rng,], states)\n\nReturn a random BPFactor whose domain is specified by the iterable states.\n\nExamples\n\nCreate a random factor connected to three variables x_1 in 12 x_2 in 1234 x_3 in 123.\n\njulia> using BeliefPropagation.Test\n\njulia> import Random: MersenneTwister\n\njulia> states = (2, 4, 3);\n\njulia> f = rand_factor(MersenneTwister(0), states);\n\njulia> f([1, 4, 2])\n0.16703619444214968\n\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.Test.test_observables_bp-Tuple{BP}","page":"Home","title":"BeliefPropagation.Test.test_observables_bp","text":"test_observables_bp(bp::BP\n\nTest beliefs_bp, factor_beliefs_bp and bethe_free_energy_bp against the same quantities computed exactly by exhaustive enumeration.\n\n\n\n\n\n","category":"method"}]
}
