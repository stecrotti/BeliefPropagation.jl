var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BeliefPropagation","category":"page"},{"location":"#BeliefPropagation","page":"Home","title":"BeliefPropagation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BeliefPropagation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BeliefPropagation, BeliefPropagation.FactorGraphs]","category":"page"},{"location":"#BeliefPropagation.BP","page":"Home","title":"BeliefPropagation.BP","text":"BP{F<:BPFactor, FV<:BPFactor, M, MB, G<:FactorGraph}\n\nA type representing the state of the Belief Propagation algorithm.\n\nFields\n\ng: a FactorGraph\nψ: a vector of BPFactor representing the factors {ψₐ(xₐ)}ₐ\nϕ: a vector of BPFactor representing the single-variable factors {ϕᵢ(xᵢ)}ᵢ\nu: messages from factor to variable\nh: messages from variable to factor\nb: beliefs\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.BP-Tuple{FactorGraph, AbstractVector{<:BPFactor}, Any}","page":"Home","title":"BeliefPropagation.BP","text":"BP(g::FactorGraph, ψ::AbstractVector{<:BPFactor}, qs; ϕ)\n\nConstructor for the BP type.\n\nArguments\n\ng: a FactorGraph\nψ: a vector of BPFactor representing the factors {ψₐ(xₐ)}ₐ\nstates: an iterable of integers of length equal to the number of variable nodes specifyig the number of values each variable can take \nϕ: (optional) a vector of BPFactor representing the single-variable factors {ϕᵢ(xᵢ)}ᵢ\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.BPFactor","page":"Home","title":"BeliefPropagation.BPFactor","text":"BPFactor\n\nAn abstract type representing a factor.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.TabulatedBPFactor","page":"Home","title":"BeliefPropagation.TabulatedBPFactor","text":"TabulatedBPFactor\n\nA type of BPFactor constructed by specifying the output to any input in a tabular fashion via an array values.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.TabulatedBPFactor-Tuple{BPFactor, Any}","page":"Home","title":"BeliefPropagation.TabulatedBPFactor","text":"TabulatedBPFactor(f::BPFactor, states)\n\nConstruct a TabulatedBPFactor out of any BPFactor. Used mostly for tests.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.UniformFactor","page":"Home","title":"BeliefPropagation.UniformFactor","text":"UniformFactor\n\nA type of BPFactor which returns the same value for any input: it behaves as if it wasn't even there. It is used as the default for single-variable factors\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.avg_energy-Tuple{Any, BP}","page":"Home","title":"BeliefPropagation.avg_energy","text":"avg_energy([f], bp::BP)\n\nReturn the average energy ∑ₐ∑ₓₐbₐ(xₐ)[-logψₐ(xₐ)] + ∑ᵢ∑ₓᵢbᵢ(xᵢ)[-logϕᵢ(xᵢ)]\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.beliefs-Tuple{Any, BP}","page":"Home","title":"BeliefPropagation.beliefs","text":"beliefs([f], bp::BP)\n\nReturn single-variable beliefs {bᵢ(xᵢ)}ᵢ.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.bethe_free_energy-Tuple{Any, BP}","page":"Home","title":"BeliefPropagation.bethe_free_energy","text":"bethe_free_energy([f], bp::BP)\n\nReturn the bethe free energy ∑ₐ∑ₓₐbₐ(xₐ)log[bₐ(xₐ)/ψₐ(xₐ)] + ∑ᵢ∑ₓᵢbᵢ(xᵢ)log[bᵢ(xᵢ)^(1-|∂i|)/ϕᵢ(xᵢ)]\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.energy-Tuple{BP, Any}","page":"Home","title":"BeliefPropagation.energy","text":"energy(bp::BP, x)\n\nReturn the energy ∑ₐ[-logψₐ(xₐ)] + ∑ᵢ[-logϕᵢ(xᵢ)] of configuration x.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.evaluate-Tuple{BP, Any}","page":"Home","title":"BeliefPropagation.evaluate","text":"evaluate(bp::BP, x)\n\nReturn the unnormalized probability ∏ₐψₐ(xₐ)∏ᵢϕᵢ(xᵢ) of configuration x.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.factor_beliefs-Tuple{Any, BP}","page":"Home","title":"BeliefPropagation.factor_beliefs","text":"factor_beliefs([f], bp::BP)\n\nReturn factor beliefs {bₐ(xₐ)}ₐ.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.iterate!-Tuple{BP}","page":"Home","title":"BeliefPropagation.iterate!","text":"iterate!(bp::BP; kwargs...)\n\nRun BP.\n\nOptional arguments\n\nupdate_variable!: the function that computes and updates variable-to-factor messages\nupdate_factor!: the function that computes and updates factor-to-variable messages\nmaxiter: maximum number of iterations\ntol: convergence check parameter\ndamp: damping parameter\nrein: reinforcement parameter\nf: a vector to store on-the-fly computations of the bethe free energy\ncallback\ncheck_convergence: a function that checks if convergence has been reached\nextra arguments to be passed to custom update_variable! and update_factor!\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.iterate_ms!-Tuple{BP}","page":"Home","title":"BeliefPropagation.iterate_ms!","text":"iterate_ms!(bp::BP; kwargs...)\n\nRuns the max-sum algorithm (BP at zero temperature). \n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.nstates-Tuple{BP, Integer}","page":"Home","title":"BeliefPropagation.nstates","text":"nstates(bp::BP, i::Integer)\n\nReturn the number of values taken by variable i.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.rand_factor-Tuple{Random.AbstractRNG, Any}","page":"Home","title":"BeliefPropagation.rand_factor","text":"rand_factor([rng,], states)\n\nReturn a random BPFactor whose domain is specified by the iterable states.\n\nExamples\n\nCreate a random factor connected to three variables x₁ ∈ {1,2}, x₂ ∈ {1,2,3,4}, x₃ ∈ {1,2,3}.\n\njulia> using BeliefPropagation, BeliefPropagation.FactorGraphs\n\njulia> import Random: MersenneTwister\n\njulia> states = (2, 4, 3);\n\njulia> f = rand_factor(MersenneTwister(0), states);\n\njulia> f([1, 4, 2])\n0.16703619444214968\n\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.reset!-Tuple{BP}","page":"Home","title":"BeliefPropagation.reset!","text":"reset!(bp::BP)\n\nReset all messages and beliefs to zero\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.FactorGraph","page":"Home","title":"BeliefPropagation.FactorGraphs.FactorGraph","text":"FactorGraph{T}\n\nA type representing a factor graph.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.FactorGraphs.FactorGraph-Tuple{AbstractMatrix}","page":"Home","title":"BeliefPropagation.FactorGraphs.FactorGraph","text":"FactorGraph(A::AbstractMatrix)\n\nConstruct a FactorGraph from adjacency matrix A with the convention that rows are factors, columns are variables.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.FactorGraphVertex","page":"Home","title":"BeliefPropagation.FactorGraphs.FactorGraphVertex","text":"FactorGraphVertex\n\nA type to represent a vertex in a bipartite graph, to be passed as an argument to neighbors, inedges, outedges, see examples therein. It is recommended to use the variable and factor constructors.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.FactorGraphs.edge_indices-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"BeliefPropagation.FactorGraphs.edge_indices","text":"IndexedGraphs.edge_indices(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the indices of the edges incident on vertex v, with v.\n\nYou should use it as a lightweight alternative to inedges, outedges when the indices of the edges are all you care about.\n\nThe output of edge_indices does not allocate and it can be used to index external arrays of properties directly\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs, Test\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> edgeprops = randn(ne(g));\n\njulia> indices = (idx(e) for e in outedges(g, variable(3)));\n\njulia> indices_noalloc = edge_indices(g, variable(3));\n\njulia> @assert edgeprops[collect(indices)] == edgeprops[indices_noalloc]\n\njulia> @test_throws ArgumentError edgeprops[indices]\nTest Passed\n      Thrown: ArgumentError\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.factor-Tuple{Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.factor","text":"factor(a::Integer)\n\nWraps index a in a container such that other functions like neighbors, inedges etc. know that it indices a factor node.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.factors-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.factors","text":"factors(g::FactorGraph)\n\nReturn a lazy iterator to the indices of factor vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.nfactors-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.nfactors","text":"nactors(g::FactorGraph)\n\nReturn the number of actors vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.nvariables-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.nvariables","text":"nvariables(g::FactorGraph)\n\nReturn the number of variables vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.pairwise_interaction_graph-Tuple{IndexedGraphs.IndexedGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.pairwise_interaction_graph","text":"pairwise_interaction_graph(g::IndexedGraph)\n\nConstruct a factor graph whose factors are the pair-wise interactions encoded in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.rand_factor_graph-Tuple{Random.AbstractRNG, Integer, Integer, Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.rand_factor_graph","text":"rand_factor_graph([rng=default_rng()], nvar, nfact, ned)\n\nCreate a factor graph with nvar variables, nfact factors and ned edges taken uniformly at random.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.rand_factor_graph-Tuple{Random.AbstractRNG, Integer, Integer, Real}","page":"Home","title":"BeliefPropagation.FactorGraphs.rand_factor_graph","text":"rand_factor_graph([rng=default_rng()], nvar, nfact, p)\n\nCreate a factor graph with nvar variables, nfact factors and edges taken independently with probability p.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.rand_regular_factor_graph-Tuple{Random.AbstractRNG, Integer, Integer, Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.rand_regular_factor_graph","text":"rand_regular_factor_graph([rng=default_rng()], nvar, nfact, k)\n\nCreate a factor graph with nvar variables and nfact factors, where all factors have degree k.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.rand_tree_factor_graph-Tuple{Random.AbstractRNG, Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.rand_tree_factor_graph","text":"rand_tree_factor_graph([rng=default_rng()], n)\n\nCreate a tree factor graph with n vertices in total. The proportion of variables/factors is casual.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.variable-Tuple{Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.variable","text":"variable(i::Integer)\n\nWraps index i in a container such that other functions like neighbors, inedges etc. know that it indices a variable node.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.variables-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.variables","text":"variables(g::FactorGraph)\n\nReturn a lazy iterator to the indices of variable vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.edges-Tuple{FactorGraph}","page":"Home","title":"Graphs.edges","text":"edges(g::FactorGraph)\n\nReturn a lazy iterator to the edges of g, with the convention that the source is the factor and the destination is the variable\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(edges(g))\n5-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 2 => 1 with index 1\n Indexed Edge 1 => 2 with index 2\n Indexed Edge 1 => 3 with index 3\n Indexed Edge 3 => 3 with index 4\n Indexed Edge 3 => 4 with index 5\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.neighbors-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"Graphs.neighbors","text":"IndexedGraphs.neighbors(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the neighbors of vertex v.\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(neighbors(g, variable(3)))\n2-element Vector{Int64}:\n 1\n 3\n\njulia> collect(neighbors(g, factor(2)))\n1-element Vector{Int64}:\n 1\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs.inedges-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"IndexedGraphs.inedges","text":"IndexedGraphs.inedges(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the edges incident on vertex v, with v as the destination.\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(inedges(g, factor(2)))\n1-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 1 => 2 with index 1\n\n\njulia> collect(inedges(g, variable(3)))\n2-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 1 => 3 with index 3\n Indexed Edge 3 => 3 with index 4\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs.outedges-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"IndexedGraphs.outedges","text":"IndexedGraphs.outedges(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the edges incident on vertex v, with v as the source.\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(outedges(g, factor(2)))\n1-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 2 => 1 with index 1\n\njulia> collect(outedges(g, variable(3)))\n2-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 3 => 1 with index 3\n Indexed Edge 3 => 3 with index 4\n\n\n\n\n\n","category":"method"}]
}
