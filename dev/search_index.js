var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BeliefPropagation","category":"page"},{"location":"#BeliefPropagation","page":"Home","title":"BeliefPropagation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BeliefPropagation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BeliefPropagation, BeliefPropagation.FactorGraphs]","category":"page"},{"location":"#BeliefPropagation.FactorGraphs.FactorGraph","page":"Home","title":"BeliefPropagation.FactorGraphs.FactorGraph","text":"FactorGraph{T}\n\nA type representing a factor graph.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.FactorGraphs.FactorGraph-Tuple{AbstractMatrix}","page":"Home","title":"BeliefPropagation.FactorGraphs.FactorGraph","text":"FactorGraph(A::AbstractMatrix)\n\nConstruct a FactorGraph from adjacency matrix A with the convention that rows are factors, columns are variables.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.FactorGraphVertex","page":"Home","title":"BeliefPropagation.FactorGraphs.FactorGraphVertex","text":"FactorGraphVertex\n\nA type to represent a vertex in a bipartite graph, to be passed as an argument to neighbors, inedges, outedges, see examples therein. It is recommended to use the variable and factor constructors.\n\n\n\n\n\n","category":"type"},{"location":"#BeliefPropagation.FactorGraphs.factor-Tuple{Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.factor","text":"factor(a::Integer)\n\nWraps index a in a container such that other functions like neighbors, inedges etc. know that it indices a factor node.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.factors-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.factors","text":"factors(g::FactorGraph)\n\nReturn a lazy iterator to the indices of factor vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.nfactors-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.nfactors","text":"nactors(g::FactorGraph)\n\nReturn the number of actors vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.nvariables-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.nvariables","text":"nvariables(g::FactorGraph)\n\nReturn the number of variables vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.pairwise_interaction_graph-Tuple{IndexedGraphs.IndexedGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.pairwise_interaction_graph","text":"pairwise_interaction_graph(g::IndexedGraph)\n\nConstruct a factor graph whose factors are the pair-wise interactions encoded in g.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.variable-Tuple{Integer}","page":"Home","title":"BeliefPropagation.FactorGraphs.variable","text":"variable(i::Integer)\n\nWraps index i in a container such that other functions like neighbors, inedges etc. know that it indices a variable node.\n\n\n\n\n\n","category":"method"},{"location":"#BeliefPropagation.FactorGraphs.variables-Tuple{FactorGraph}","page":"Home","title":"BeliefPropagation.FactorGraphs.variables","text":"variables(g::FactorGraph)\n\nReturn a lazy iterator to the indices of variable vertices in g.\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.edges-Tuple{FactorGraph}","page":"Home","title":"Graphs.edges","text":"edges(g::FactorGraph)\n\nReturn a lazy iterator to the edges of g, with the convention that the source is the factor and the destination is the variable\n\n\n\n\n\n","category":"method"},{"location":"#Graphs.neighbors-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"Graphs.neighbors","text":"IndexedGraphs.neighbors(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the neighbors of vertex v.\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(neighbors(g, variable(3)))\n2-element Vector{Int64}:\n 1\n 3\n\njulia> collect(neighbors(g, factor(2)))\n1-element Vector{Int64}:\n 1\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs.inedges-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"IndexedGraphs.inedges","text":"IndexedGraphs.inedges(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the edges incident on vertex v, with v as the destination.\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(inedges(g, factor(2)))\n1-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 1 => 2 with index 1\n\n\njulia> collect(inedges(g, variable(3)))\n2-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 1 => 3 with index 3\n Indexed Edge 3 => 3 with index 4\n\n\n\n\n\n","category":"method"},{"location":"#IndexedGraphs.outedges-Tuple{FactorGraph, IndexedGraphs.BipartiteGraphVertex{IndexedGraphs.Left}}","page":"Home","title":"IndexedGraphs.outedges","text":"IndexedGraphs.outedges(g::FactorGraph, v::FactorGraphVertex)\n\nReturn a lazy iterators to the edges incident on vertex v, with v as the source.\n\nExamples\n\njulia> using BeliefPropagation.FactorGraphs\n\njulia> g = FactorGraph([0 1 1 0;\n                        1 0 0 0;\n                        0 0 1 1])\nFactorGraph{Int64} with 3 factors, 4 variables and 5 edges\n\njulia> collect(outedges(g, factor(2)))\n1-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 2 => 1 with index 1\n\njulia> collect(outedges(g, variable(3)))\n2-element Vector{IndexedGraphs.IndexedEdge{Int64}}:\n Indexed Edge 3 => 1 with index 3\n Indexed Edge 3 => 3 with index 4\n\n\n\n\n\n","category":"method"}]
}
